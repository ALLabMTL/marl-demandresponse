"""Normalizer module.

Contains methods to normalize state dictionnaries generated by the environment at every timestep
"""

from typing import Dict, List, TypedDict, Union

import numpy as np

from app.core.environment.environment_properties import (
    BuildingMessage,
    BuildingProperties,
    EnvironmentObsDict,
    EnvironmentProperties,
    HvacProperties,
    MessageProperties,
    StateProperties,
)


class EnvironmentNormDict(TypedDict, total=False):
    """Structure of the environment normalized values."""

    OD_temp: float
    sin_day: float
    cos_day: float
    sin_hr: float
    cos_hr: float


def norm_message(
    obs_dict: List[BuildingMessage],
    default_house_prop: BuildingProperties,
    message_prop: MessageProperties,
    norm_reg_sig: float,
) -> List[BuildingMessage]:
    """Normalize messages sent between buildings."""
    temp_messages: List[BuildingMessage] = []
    for message in obs_dict:
        temp_message: BuildingMessage = {
            "current_temp_diff_to_target": message["current_temp_diff_to_target"] / 5,
            "seconds_since_off": int(
                message["seconds_since_off"]
                / default_house_prop.hvac_prop.lockout_duration
            ),
            "curr_consumption": message["curr_consumption"] / norm_reg_sig,
            "max_consumption": message["max_consumption"] / norm_reg_sig,
        }

        if message_prop.thermal:
            temp_message.update(
                {
                    "Ua": message["Ua"] / default_house_prop.Ua,
                    "Ca": message["Ca"] / default_house_prop.Ca,
                    "Cm": message["Cm"] / default_house_prop.Cm,
                    "Hm": message["Hm"] / default_house_prop.Hm,
                }
            )
        if message_prop.hvac:
            temp_message.update(
                {
                    "cop": default_house_prop.hvac_prop.cop,
                    "latent_cooling_fraction": default_house_prop.hvac_prop.latent_cooling_fraction,
                    "cooling_capacity": default_house_prop.hvac_prop.cooling_capacity,
                }
            )
        temp_messages.append(temp_message)
    return temp_messages


def norm_hvac_dict(
    obs_dict: EnvironmentObsDict,
    hvac_state: bool,
    default_props: HvacProperties,
) -> EnvironmentObsDict:
    """Normalize Hvac state dictionnary."""
    turned_on = 1 if obs_dict["turned_on"] else 0
    lockout = 1 if obs_dict["lockout"] else 0
    seconds_since_off = int(
        obs_dict["seconds_since_off"] / obs_dict["lockout_duration"]
    )
    lockout_duration = int(obs_dict["lockout_duration"] / obs_dict["lockout_duration"])
    norm_dict: EnvironmentObsDict = {
        "turned_on": turned_on,
        "lockout": lockout,
        "seconds_since_off": seconds_since_off,
        "lockout_duration": lockout_duration,
    }
    if hvac_state:
        norm_dict.update(
            {
                "cop": obs_dict["cop"] / default_props.cop,
                "latent_cooling_fraction": obs_dict["latent_cooling_fraction"]
                / default_props.latent_cooling_fraction,
            }
        )

    return norm_dict


def norm_building_dict(
    obs_dict: EnvironmentObsDict,
    state_props: StateProperties,
    building_props: BuildingProperties,
) -> EnvironmentObsDict:
    """Normalize Building state dictionnary."""
    norm_dict: EnvironmentObsDict = {
        "deadband": obs_dict["deadband"],
        "indoor_temp": (obs_dict["indoor_temp"] - 20) / 5,
        "mass_temp": (obs_dict["mass_temp"] - 20) / 5,
        "target_temp": (obs_dict["target_temp"] - 20) / 5,
    }

    if state_props.solar_gain:
        norm_dict["solar_gain"] = obs_dict["solar_gain"] / 1000
    if state_props.thermal:
        norm_dict.update(
            {
                "Ua": obs_dict["Ua"] / building_props.Ua,
                "Ca": obs_dict["Ca"] / building_props.Ca,
                "Cm": obs_dict["Cm"] / building_props.Cm,
                "Hm": obs_dict["Hm"] / building_props.Hm,
            }
        )
    return norm_dict


def norm_powergrid_dict(
    obs_dict: EnvironmentObsDict, env_props: EnvironmentProperties
) -> EnvironmentObsDict:
    """Normalize power grid state dictionnary."""
    norm_dict: EnvironmentObsDict = {
        "reg_signal": obs_dict["reg_signal"]
        / (env_props.reward_prop.norm_reg_sig * env_props.cluster_prop.nb_agents)
    }
    return norm_dict


def norm_cluster_dict(
    obs_dict: EnvironmentObsDict,
    norm_reg_sig: float,
) -> EnvironmentObsDict:
    """Normalize cluster state dictionnary."""
    norm_dict: EnvironmentObsDict = {
        "cluster_hvac_power": obs_dict["cluster_hvac_power"] / norm_reg_sig
    }
    return norm_dict


def flatten_message(messages: List[BuildingMessage]) -> list:
    """Flatten message list of buildings."""
    flat_messages: List[Union[object, float, int]] = []
    for message in messages:
        flat_message = list(message.values())
        flat_messages = flat_messages + flat_message
    return flat_messages


def env_norm_dict(
    obs_dict: EnvironmentObsDict, state_prop: StateProperties
) -> EnvironmentNormDict:
    """Normalize environment state dictionnary."""
    norm_dict: EnvironmentNormDict = {}
    if state_prop.thermal:
        norm_dict["OD_temp"] = (obs_dict["OD_temp"] - 20) / 5
    norm_env_dict: EnvironmentNormDict = {}
    if state_prop.day:
        day = obs_dict["datetime"].timetuple().tm_yday
        norm_env_dict["sin_day"] = np.sin(day * 2 * np.pi / 365)
        norm_env_dict["cos_day"] = np.cos(day * 2 * np.pi / 365)
    if state_prop.hour:
        hour = obs_dict["datetime"].hour
        norm_env_dict["sin_hr"] = np.sin(hour * 2 * np.pi / 24)
        norm_env_dict["cos_hr"] = np.cos(hour * 2 * np.pi / 24)
    return norm_dict


def norm_state_dict(
    obs_dicts: Dict[int, EnvironmentObsDict], env_props: EnvironmentProperties
) -> List[np.ndarray]:
    """Normalize the observation dictionnaries and convert them a flatten numpy array.

    Returns a list of flatten numpy arrays of length number of agents.
    """
    norm_agents_list: List[np.ndarray] = []
    for obs_dict_id in obs_dicts.keys():
        norm_dict = norm_hvac_dict(
            obs_dicts[obs_dict_id],
            env_props.state_prop.hvac,
            env_props.cluster_prop.house_prop.hvac_prop,
        )
        norm_dict.update(
            norm_cluster_dict(
                obs_dicts[obs_dict_id], env_props.reward_prop.norm_reg_sig
            )
        )
        norm_dict.update(norm_powergrid_dict(obs_dicts[obs_dict_id], env_props))
        norm_dict.update(
            norm_building_dict(
                obs_dicts[obs_dict_id],
                env_props.state_prop,
                env_props.cluster_prop.house_prop,
            )
        )
        flat_messages = flatten_message(
            norm_message(
                obs_dicts[obs_dict_id]["message"],
                env_props.cluster_prop.house_prop,
                env_props.cluster_prop.message_prop,
                env_props.reward_prop.norm_reg_sig,
            )
        )
        env_dict = env_norm_dict(obs_dicts[obs_dict_id], env_props.state_prop)
        array = np.array(
            list(norm_dict.values()) + list(env_dict.values()) + flat_messages
        )
        norm_agents_list.append(array)
    return norm_agents_list
